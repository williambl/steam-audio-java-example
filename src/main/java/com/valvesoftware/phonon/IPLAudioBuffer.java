/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.valvesoftware.phonon;

public class IPLAudioBuffer {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLAudioBuffer(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLAudioBuffer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        phononJNI.delete_IPLAudioBuffer(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setFormat(IPLAudioFormat value) {
    phononJNI.IPLAudioBuffer_format_set(swigCPtr, this, IPLAudioFormat.getCPtr(value), value);
  }

  public IPLAudioFormat getFormat() {
    long cPtr = phononJNI.IPLAudioBuffer_format_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLAudioFormat(cPtr, false);
  }

  public void setNumSamples(int value) {
    phononJNI.IPLAudioBuffer_numSamples_set(swigCPtr, this, value);
  }

  public int getNumSamples() {
    return phononJNI.IPLAudioBuffer_numSamples_get(swigCPtr, this);
  }

  public void setInterleavedBuffer(java.nio.FloatBuffer value) {
  assert value.isDirect() : "Buffer must be allocated direct.";
    {
      phononJNI.IPLAudioBuffer_interleavedBuffer_set(swigCPtr, this, value);
    }
  }

  public java.nio.FloatBuffer getInterleavedBuffer() {
  return phononJNI.IPLAudioBuffer_interleavedBuffer_get(swigCPtr, this);
}

  public void setDeinterleavedBuffer(SWIGTYPE_p_p_float value) {
    phononJNI.IPLAudioBuffer_deinterleavedBuffer_set(swigCPtr, this, SWIGTYPE_p_p_float.getCPtr(value));
  }

  public SWIGTYPE_p_p_float getDeinterleavedBuffer() {
    long cPtr = phononJNI.IPLAudioBuffer_deinterleavedBuffer_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_float(cPtr, false);
  }

  public IPLAudioBuffer() {
    this(phononJNI.new_IPLAudioBuffer(), true);
  }

}
