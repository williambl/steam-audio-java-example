/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.valvesoftware.phonon;

public class IPLSimulationSettings {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLSimulationSettings(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLSimulationSettings obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        phononJNI.delete_IPLSimulationSettings(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setSceneType(IPLSceneType value) {
    phononJNI.IPLSimulationSettings_sceneType_set(swigCPtr, this, value.swigValue());
  }

  public IPLSceneType getSceneType() {
    return IPLSceneType.swigToEnum(phononJNI.IPLSimulationSettings_sceneType_get(swigCPtr, this));
  }

  public void setMaxNumOcclusionSamples(int value) {
    phononJNI.IPLSimulationSettings_maxNumOcclusionSamples_set(swigCPtr, this, value);
  }

  public int getMaxNumOcclusionSamples() {
    return phononJNI.IPLSimulationSettings_maxNumOcclusionSamples_get(swigCPtr, this);
  }

  public void setNumRays(int value) {
    phononJNI.IPLSimulationSettings_numRays_set(swigCPtr, this, value);
  }

  public int getNumRays() {
    return phononJNI.IPLSimulationSettings_numRays_get(swigCPtr, this);
  }

  public void setNumDiffuseSamples(int value) {
    phononJNI.IPLSimulationSettings_numDiffuseSamples_set(swigCPtr, this, value);
  }

  public int getNumDiffuseSamples() {
    return phononJNI.IPLSimulationSettings_numDiffuseSamples_get(swigCPtr, this);
  }

  public void setNumBounces(int value) {
    phononJNI.IPLSimulationSettings_numBounces_set(swigCPtr, this, value);
  }

  public int getNumBounces() {
    return phononJNI.IPLSimulationSettings_numBounces_get(swigCPtr, this);
  }

  public void setNumThreads(int value) {
    phononJNI.IPLSimulationSettings_numThreads_set(swigCPtr, this, value);
  }

  public int getNumThreads() {
    return phononJNI.IPLSimulationSettings_numThreads_get(swigCPtr, this);
  }

  public void setIrDuration(float value) {
    phononJNI.IPLSimulationSettings_irDuration_set(swigCPtr, this, value);
  }

  public float getIrDuration() {
    return phononJNI.IPLSimulationSettings_irDuration_get(swigCPtr, this);
  }

  public void setAmbisonicsOrder(int value) {
    phononJNI.IPLSimulationSettings_ambisonicsOrder_set(swigCPtr, this, value);
  }

  public int getAmbisonicsOrder() {
    return phononJNI.IPLSimulationSettings_ambisonicsOrder_get(swigCPtr, this);
  }

  public void setMaxConvolutionSources(int value) {
    phononJNI.IPLSimulationSettings_maxConvolutionSources_set(swigCPtr, this, value);
  }

  public int getMaxConvolutionSources() {
    return phononJNI.IPLSimulationSettings_maxConvolutionSources_get(swigCPtr, this);
  }

  public void setBakingBatchSize(int value) {
    phononJNI.IPLSimulationSettings_bakingBatchSize_set(swigCPtr, this, value);
  }

  public int getBakingBatchSize() {
    return phononJNI.IPLSimulationSettings_bakingBatchSize_get(swigCPtr, this);
  }

  public void setIrradianceMinDistance(float value) {
    phononJNI.IPLSimulationSettings_irradianceMinDistance_set(swigCPtr, this, value);
  }

  public float getIrradianceMinDistance() {
    return phononJNI.IPLSimulationSettings_irradianceMinDistance_get(swigCPtr, this);
  }

  public IPLSimulationSettings() {
    this(phononJNI.new_IPLSimulationSettings(), true);
  }

}
