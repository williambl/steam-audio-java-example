/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.valvesoftware.phonon;

public class IPLDirectSoundPath {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLDirectSoundPath(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLDirectSoundPath obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        phononJNI.delete_IPLDirectSoundPath(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setDirection(IPLVector3 value) {
    phononJNI.IPLDirectSoundPath_direction_set(swigCPtr, this, IPLVector3.getCPtr(value), value);
  }

  public IPLVector3 getDirection() {
    long cPtr = phononJNI.IPLDirectSoundPath_direction_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLVector3(cPtr, false);
  }

  public void setDistanceAttenuation(float value) {
    phononJNI.IPLDirectSoundPath_distanceAttenuation_set(swigCPtr, this, value);
  }

  public float getDistanceAttenuation() {
    return phononJNI.IPLDirectSoundPath_distanceAttenuation_get(swigCPtr, this);
  }

  public void setAirAbsorption(float[] value) {
    phononJNI.IPLDirectSoundPath_airAbsorption_set(swigCPtr, this, value);
  }

  public float[] getAirAbsorption() {
    return phononJNI.IPLDirectSoundPath_airAbsorption_get(swigCPtr, this);
  }

  public void setPropagationDelay(float value) {
    phononJNI.IPLDirectSoundPath_propagationDelay_set(swigCPtr, this, value);
  }

  public float getPropagationDelay() {
    return phononJNI.IPLDirectSoundPath_propagationDelay_get(swigCPtr, this);
  }

  public void setOcclusionFactor(float value) {
    phononJNI.IPLDirectSoundPath_occlusionFactor_set(swigCPtr, this, value);
  }

  public float getOcclusionFactor() {
    return phononJNI.IPLDirectSoundPath_occlusionFactor_get(swigCPtr, this);
  }

  public void setTransmissionFactor(float[] value) {
    phononJNI.IPLDirectSoundPath_transmissionFactor_set(swigCPtr, this, value);
  }

  public float[] getTransmissionFactor() {
    return phononJNI.IPLDirectSoundPath_transmissionFactor_get(swigCPtr, this);
  }

  public void setDirectivityFactor(float value) {
    phononJNI.IPLDirectSoundPath_directivityFactor_set(swigCPtr, this, value);
  }

  public float getDirectivityFactor() {
    return phononJNI.IPLDirectSoundPath_directivityFactor_get(swigCPtr, this);
  }

  public IPLDirectSoundPath() {
    this(phononJNI.new_IPLDirectSoundPath(), true);
  }

}
