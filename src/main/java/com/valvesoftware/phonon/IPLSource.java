/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.valvesoftware.phonon;

public class IPLSource {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IPLSource(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IPLSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        phononJNI.delete_IPLSource(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setPosition(IPLVector3 value) {
    phononJNI.IPLSource_position_set(swigCPtr, this, IPLVector3.getCPtr(value), value);
  }

  public IPLVector3 getPosition() {
    long cPtr = phononJNI.IPLSource_position_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLVector3(cPtr, false);
  }

  public void setAhead(IPLVector3 value) {
    phononJNI.IPLSource_ahead_set(swigCPtr, this, IPLVector3.getCPtr(value), value);
  }

  public IPLVector3 getAhead() {
    long cPtr = phononJNI.IPLSource_ahead_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLVector3(cPtr, false);
  }

  public void setUp(IPLVector3 value) {
    phononJNI.IPLSource_up_set(swigCPtr, this, IPLVector3.getCPtr(value), value);
  }

  public IPLVector3 getUp() {
    long cPtr = phononJNI.IPLSource_up_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLVector3(cPtr, false);
  }

  public void setRight(IPLVector3 value) {
    phononJNI.IPLSource_right_set(swigCPtr, this, IPLVector3.getCPtr(value), value);
  }

  public IPLVector3 getRight() {
    long cPtr = phononJNI.IPLSource_right_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLVector3(cPtr, false);
  }

  public void setDirectivity(IPLDirectivity value) {
    phononJNI.IPLSource_directivity_set(swigCPtr, this, IPLDirectivity.getCPtr(value), value);
  }

  public IPLDirectivity getDirectivity() {
    long cPtr = phononJNI.IPLSource_directivity_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLDirectivity(cPtr, false);
  }

  public void setDistanceAttenuationModel(IPLDistanceAttenuationModel value) {
    phononJNI.IPLSource_distanceAttenuationModel_set(swigCPtr, this, IPLDistanceAttenuationModel.getCPtr(value), value);
  }

  public IPLDistanceAttenuationModel getDistanceAttenuationModel() {
    long cPtr = phononJNI.IPLSource_distanceAttenuationModel_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLDistanceAttenuationModel(cPtr, false);
  }

  public void setAirAbsorptionModel(IPLAirAbsorptionModel value) {
    phononJNI.IPLSource_airAbsorptionModel_set(swigCPtr, this, IPLAirAbsorptionModel.getCPtr(value), value);
  }

  public IPLAirAbsorptionModel getAirAbsorptionModel() {
    long cPtr = phononJNI.IPLSource_airAbsorptionModel_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IPLAirAbsorptionModel(cPtr, false);
  }

  public IPLSource() {
    this(phononJNI.new_IPLSource(), true);
  }

}
